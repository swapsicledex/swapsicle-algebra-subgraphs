type EternalFarming @entity {
  id: ID!
  rewardToken: Bytes!
  bonusRewardToken: Bytes!
  virtualPool: Bytes!
  pool: Bytes!
  nonce: BigInt!
  reward: BigInt!
  bonusReward: BigInt!
  rewardRate: BigInt!
  bonusRewardRate: BigInt!
  isDeactivated: Boolean
  minRangeLength: BigInt!
  # timestamp of transaction
  timestamp: BigInt!
  # pointer to transaction
  transaction: Transaction!
}

type Deposit @entity {
  id: ID!
  owner: Bytes!
  pool: Bytes!
  eternalFarming: Bytes 
  liquidity: BigInt!
  rangeLength: BigInt!
  # timestamp of transaction
  timestamp: BigInt!
  # pointer to transaction
  transaction: Transaction!
}

type Reward @entity{
  id: ID!
  rewardAddress: Bytes!
  amount: BigInt!
  owner: Bytes!
  # timestamp of transaction
  timestamp: BigInt!
  # pointer to transaction
  transaction: Transaction!
}

type Token @entity{
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  gasLimit: BigInt!
  gasPrice: BigInt!
  # derived values
  eternalFarmings: [EternalFarming!]! @derivedFrom(field: "transaction")
  deposits: [Deposit!]! @derivedFrom(field: "transaction")
  rewards: [Reward!]! @derivedFrom(field: "transaction")
}